{"version":3,"sources":["webpack:///./src/components/Layout.js","webpack:///./src/pages/index.js"],"names":["Header","styled","header","Footer","footer","MainContainer","div","LargeHeader","to","src","require","alt","width","height","RegularHeader","style","padding","Layout","location","children","title","isRootPath","pathname","SiteContainer","Title","h1","fontDisplay","Divider","hr","colors","pageQuery","PodcastIndex","data","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","MetaTags","map","node","slug","fields","frontmatter","date","number","summary","description","excerpt","fileLink","PodcastEpisodeSummary","href"],"mappings":"uLAKMA,EAASC,IAAOC,OAAV,oEAAGD,CAAH,0EAONE,EAASF,IAAOG,OAAV,oEAAGH,CAAH,0EAONI,EAAgBJ,IAAOK,IAAV,2EAAGL,CAAH,kDAMbM,EAAc,kBAChB,kBAACP,EAAD,KACI,kBAAC,IAAD,CAAMQ,GAAE,KACJ,yBAAKC,IAAKC,EAAQ,QACVC,IAAI,iEACJC,MAAO,IACPC,OAAQ,SAKtBC,EAAgB,kBAClB,kBAACd,EAAD,CAAQe,MAAO,CAAEC,QAAS,SACtB,kBAAC,IAAD,CAAMR,GAAE,KACJ,yBAAKC,IAAKC,EAAQ,QACVC,IAAI,iEACJC,MAAO,IACPC,OAAQ,SA4BbI,EAvBA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAiBC,GAAe,EAAtBC,MAAsB,EAAfD,UAEzBE,EADQ,MACKH,EAASI,SAE5B,OACI,kBAACC,EAAA,EAAD,KACI,gCACKF,EACG,kBAAC,EAAD,MAEA,kBAAC,EAAD,OAGR,kBAAChB,EAAD,KACKc,GAEL,kBAAChB,EAAD,KACI,yBAAKM,IAAKC,EAAQ,QAAqBE,MAAO,IAAKC,OAAQ,Q,wBChE3E,0CAUA,IAAMW,EAAQvB,IAAOwB,GAAV,mEAAGxB,CAAH,uBACLyB,KAKAC,EAAU1B,IAAO2B,GAAV,qEAAG3B,CAAH,mDAEe4B,KAsDfC,GAFEC,UA/CM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMd,EAAe,EAAfA,SACpBe,EAAYD,EAAKE,KAAKC,aAAaf,MACnCgB,EAAQJ,EAAKK,kBAAkBC,MAErC,OACI,kBAAC,EAAD,CAAQpB,SAAUA,EAAUE,MAAOa,GAC/B,kBAACM,EAAA,EAAD,MAEA,kBAACf,EAAD,iBAICY,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAAOD,EAAKE,OAAOD,KACnBtB,EAAQqB,EAAKG,YAAYxB,OAASqB,EAAKE,OAAOD,KAC9CG,EAAOJ,EAAKG,YAAYC,KACxBC,EAASL,EAAKG,YAAYE,OAC1BC,EAAUN,EAAKG,YAAYI,aAAeP,EAAKQ,QAC/CC,EAAWT,EAAKG,YAAYM,SAElC,OACI,kBAACC,EAAA,EAAD,CACIT,KAAMA,EACNtB,MAAOA,EACPyB,KAAMA,EACNC,OAAQA,EACRC,QAASA,EACTG,SAAUA,OAKtB,kBAACvB,EAAD,MAEA,kBAACH,EAAD,kBAIA,4BACI,4BAAI,uBAAG4B,KAAK,mDAAR,aACJ,sCAAW,uBAAGA,KAAK,kCAAR,mBASL","file":"component---src-pages-index-js-5b4fe25841a9f22d26ae.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from 'styled-components';\nimport SiteContainer from './SiteContainer';\n\nconst Header = styled.header`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 1rem;\n`;\n\nconst Footer = styled.footer`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n`;\n\nconst MainContainer = styled.div`\n    width: 60vw;\n    max-width: 40rem;\n    margin: 1rem auto;\n`;\n\nconst LargeHeader = () => (\n    <Header>\n        <Link to={`/`}>\n            <img src={require('./nge-logo.svg')}\n                    alt=\"Not Good Enough — Inadequate responses to Inadequate responses\"\n                    width={260}\n                    height={260} />\n        </Link>\n    </Header>\n);\n\nconst RegularHeader = () => (\n    <Header style={{ padding: '2rem' }}>\n        <Link to={`/`}>\n            <img src={require('./nge-logotype.svg')}\n                    alt=\"Not Good Enough — Inadequate responses to Inadequate responses\"\n                    width={200}\n                    height={100} />\n        </Link>\n    </Header>\n);\n\nconst Layout = ({ location, title, children }) => {\n    const rootPath = `${__PATH_PREFIX__}/`;\n    const isRootPath = location.pathname === rootPath;\n\n    return (\n        <SiteContainer>\n            <header>\n                {isRootPath ? (\n                    <LargeHeader />\n                ) : (\n                    <RegularHeader />\n                )}\n            </header>\n            <MainContainer>\n                {children}\n            </MainContainer>\n            <Footer>\n                <img src={require('./nge-banner.svg')} width={234} height={84} />\n            </Footer>\n        </SiteContainer>\n    );\n}\n\nexport default Layout;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport { fontDisplay } from '../styles/fonts';\nimport * as colors from '../styles/colors';\n\nimport Layout from '../components/Layout';\nimport MetaTags from '../components/MetaTags';\nimport PodcastEpisodeSummary from '../components/PodcastEpisodeSummary';\n\nconst Title = styled.h1`\n    ${fontDisplay}\n    margin: 1rem 0;\n`;\n\n\nconst Divider = styled.hr`\n    border: 0;\n    border-top: 1px solid ${colors.foregroundTertiary};\n    margin: 2rem;\n`;\n\n\nconst PodcastIndex = ({ data, location }) => {\n    const siteTitle = data.site.siteMetadata.title;\n    const posts = data.allMarkdownRemark.edges;\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <MetaTags />\n\n            <Title>\n                Episodes\n            </Title>\n\n            {posts.map(({ node }) => {\n                const slug = node.fields.slug;\n                const title = node.frontmatter.title || node.fields.slug;\n                const date = node.frontmatter.date;\n                const number = node.frontmatter.number;\n                const summary = node.frontmatter.description || node.excerpt;\n                const fileLink = node.frontmatter.fileLink;\n\n                return (\n                    <PodcastEpisodeSummary\n                        slug={slug}\n                        title={title}\n                        date={date}\n                        number={number}\n                        summary={summary}\n                        fileLink={fileLink}\n                    />\n                );\n            })}\n\n            <Divider />\n\n            <Title>\n                Subscribe\n            </Title>\n\n            <ul>\n                <li><a href=\"https://feed.podbean.com/notgoodenough/feed.xml\">RSS Feed</a></li>\n                <li>Follow <a href=\"https://twitter.com/notgoodpod\">@notgoodpod</a></li>\n            </ul>\n\n        </Layout>\n    );\n};\n\nexport default PodcastIndex;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n            edges {\n                node {\n                    excerpt\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        number\n                        title\n                        description\n                        fileLink\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}